name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - release
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - release
      - develop
permissions:
  checks: write
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Prepare
        run: echo "Prepare step"

  lint:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.0'
      - name: Install dependencies
        run: npm install
        working-directory: ./my-project
      - name: Run ESLint
        run: npx eslint . --format json --output-file eslint-report.json
        working-directory: ./my-project
      - name: Upload ESLint Report
        uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: ./my-project/eslint-report.json

  tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.0'
      - name: Install dependencies
        run: npm install
        working-directory: ./my-project
      - name: Run tests
        run: npm run test
        working-directory: ./my-project

  build:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t my-app:latest -f ./Dockerfile .
      - name: Save Docker image as artifact
        run: docker save my-app:latest | gzip > my-app-latest.tar.gz
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: my-app-latest.tar.gz

  update-version:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Update Version
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          chmod +x update-version.sh
          chmod +x Project.json
          BRANCH=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          ./update-version.sh "$BRANCH" "Project.json"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Project.json
          git commit -m "Update version"
          git push

  deploy:
    runs-on: ubuntu-latest
    needs: update-version
    if: github.event_name == 'push' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: ./
      - name: Load Docker image
        run: docker load < my-app-latest.tar.gz
      - name: Extract version from Project.json
        id: extract_version
        run: |
          VERSION=$(jq -r '.version' Project.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Determine release tag
        id: determine_tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "TAG=latest" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/release" ]; then
            echo "TAG=release" >> $GITHUB_ENV
          else
            echo "TAG=dev" >> $GITHUB_ENV
          fi
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}-${{ env.TAG }}
          release_name: Release ${{ env.VERSION }}-${{ env.TAG }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./my-app-latest.tar.gz
          asset_name: my-app-latest.tar.gz
          asset_content_type: application/gzip

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Notify
        run: echo "Notify step"
